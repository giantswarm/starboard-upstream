---
# This workflow is triggered on push or pull request for the main branch.
# It runs tests and various checks to validate that the proposed changes
# will not introduce any regression after merging the code to the main branch.
name: Build
on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/*.md'
      - '*.md'
      - 'docs/**'
      - 'mkdocs.yml'
      - 'LICENSE'
      - 'NOTICE'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/*.md'
      - '*.md'
      - 'docs/**'
      - 'mkdocs.yml'
      - 'LICENSE'
      - 'NOTICE'

env:
  GO_VERSION: "1.16"
  KIND_VERSION: "v0.11.1"
  KIND_IMAGE: "kindest/node:v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6"
jobs:
  verify-code:
    name: Verify code
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cached Go dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Verify Go code
        uses: golangci/golangci-lint-action@v2
        with:
          args: --verbose
          version: latest
          skip-pkg-cache: true
          skip-build-cache: true
      - name: Verify YAML code
        uses: ibiqlik/action-yamllint@v3
      - name: Vendor Go modules
        run: go mod vendor
      - name: Verify generated Go code
        run: GOPATH="$(go env GOPATH)" ./hack/verify-codegen.sh
  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run unit tests
        run: make unit-tests
      - name: Upload code coverage
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.txt
  itest-starboard-cli:
    name: Run integration tests / Starboard CLI
    needs:
      - unit-tests
      - verify-code
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Kubernetes cluster (KIND)
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: ${{ env.KIND_VERSION }}
          image: ${{ env.KIND_IMAGE }}
      - name: Test connection to Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl describe node
      - name: Run integration tests
        run: |
          make itests-starboard
        env:
          KUBECONFIG: /home/runner/.kube/config
          STARBOARD_TEST_CLI_LOG_LEVEL: "0"
      - name: Upload code coverage
        uses: codecov/codecov-action@v2
        with:
          files: ./itest/starboard/coverage.txt
  itest-starboard-operator:
    name: Run integration tests / Starboard Operator
    needs:
      - unit-tests
      - verify-code
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Kubernetes cluster (KIND)
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: ${{ env.KIND_VERSION }}
          image: ${{ env.KIND_IMAGE }}
      - name: Test connection to Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl describe node
      - name: Run integration tests
        run: |
          kubectl apply -f deploy/crd/vulnerabilityreports.crd.yaml \
            -f deploy/crd/configauditreports.crd.yaml \
            -f deploy/crd/clusterconfigauditreports.crd.yaml \
            -f deploy/crd/ciskubebenchreports.crd.yaml
          kubectl apply -f deploy/static/01-starboard-operator.ns.yaml \
            -f deploy/static/02-starboard-operator.rbac.yaml
          make itests-starboard-operator
        env:
          KUBECONFIG: /home/runner/.kube/config
          OPERATOR_NAMESPACE: starboard-system
          OPERATOR_TARGET_NAMESPACES: default
      - name: Upload code coverage
        uses: codecov/codecov-action@v2
        with:
          files: ./itest/starboard-operator/coverage.txt
  integration-operator-conftest:
    name: Integration / Operator / Conftest
    needs:
      - unit-tests
      - verify-code
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Kubernetes cluster (KIND)
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: ${{ env.KIND_VERSION }}
          image: ${{ env.KIND_IMAGE }}
      - name: Test connection to Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl describe node
      - name: Run integration tests
        run: |
          kubectl apply -f deploy/crd/vulnerabilityreports.crd.yaml \
            -f deploy/crd/configauditreports.crd.yaml \
            -f deploy/crd/clusterconfigauditreports.crd.yaml \
            -f deploy/crd/ciskubebenchreports.crd.yaml
          kubectl apply -f deploy/static/01-starboard-operator.ns.yaml \
            -f deploy/static/02-starboard-operator.rbac.yaml
          make integration-operator-conftest
        env:
          KUBECONFIG: /home/runner/.kube/config
          OPERATOR_NAMESPACE: starboard-system
          OPERATOR_TARGET_NAMESPACES: default
      - name: Upload code coverage
        uses: codecov/codecov-action@v2
        with:
          files: ./itest/starboard-operator/configauditreport/conftest/coverage.txt
  test-helm-chart:
    if: "false" # TODO It's broken on a release candidate PRs because it's using container image that has not been released yet.
    name: Test Helm Chart
    needs:
      - itest-starboard-cli
      - itest-starboard-operator
      - integration-operator-conftest
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 #v2.4.0
        with:
          fetch-depth: 0
      - name: Install Helm
        uses: azure/setup-helm@18bc76811624f360dbd7f18c2d4ecb32c7b87bab #v1.1
        with:
          version: v3.5.0
      - name: Set up python
        uses: actions/setup-python@7f80679172b057fc5e90d70d197929d454754a5a #v2.3.0
        with:
          python-version: 3.7
      - name: Setup Chart Linting
        id: lint
        uses: helm/chart-testing-action@6b64532d456fa490a3da177fbd181ac4c8192b58 #v2.1.0
      - name: Setup Kubernetes cluster (KIND)
        uses: helm/kind-action@94729529f85113b88f4f819c17ce61382e6d8478 #v1.2.0
        with:
          version: ${{ env.KIND_VERSION }}
          image: ${{ env.KIND_IMAGE }}
      - name: Run chart-testing
        run: ct lint-and-install --validate-maintainers=false --charts deploy/helm
  release-snapshot:
    name: Release unversioned snapshot
    needs:
      - itest-starboard-cli
      - itest-starboard-operator
      - integration-operator-conftest
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Release snapshot
        uses: goreleaser/goreleaser-action@v2
        with:
          version: v1.1.0
          args: release --snapshot --skip-publish --rm-dist
      - name: Scan Starboard CLI image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/aquasec/starboard:${{ github.sha }}'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      - name: Scan Starboard Operator image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/aquasec/starboard-operator:${{ github.sha }}'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      - name: Scan Starboard Scanner Aqua image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/aquasec/starboard-scanner-aqua:${{ github.sha }}'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
